   Compiling mc-indexer-extractor v0.1.0 (/Users/bob/code/indexer/crates/extractor)
error[E0432]: unresolved import `super::ast_node::Node`
  --> src/extractor.rs:12:5
   |
12 | use super::ast_node::Node;
   |     ^^^^^^^^^^^^^^^^^^^^^ no `Node` in `ast_node`

error[E0432]: unresolved import `super::ast_node::Node`
  --> src/executor.rs:12:5
   |
12 | use super::ast_node::Node;
   |     ^^^^^^^^^^^^^^^^^^^^^ no `Node` in `ast_node`

error[E0432]: unresolved import `super::ast_node::Node`
  --> src/registry.rs:12:5
   |
12 | use super::ast_node::Node;
   |     ^^^^^^^^^^^^^^^^^^^^^ no `Node` in `ast_node`

error[E0432]: unresolved import `super::ast_node::Node`
  --> src/executable.rs:12:5
   |
12 | use super::ast_node::Node;
   |     ^^^^^^^^^^^^^^^^^^^^^ no `Node` in `ast_node`

error[E0432]: unresolved import `super::ast_node::Node`
  --> src/iterator_meta.rs:12:5
   |
12 | use super::ast_node::Node;
   |     ^^^^^^^^^^^^^^^^^^^^^ no `Node` in `ast_node`

error[E0432]: unresolved import `ast_node::Node`
  --> src/main.rs:26:5
   |
26 | use ast_node::Node;
   |     ^^^^^^^^^^^^^^ no `Node` in `ast_node`

error[E0412]: cannot find type `Executable` in this scope
  --> src/ast_node.rs:75:61
   |
75 |     pub fn fill_iter_unless_empty_index(&self, executable: &Executable) -> bool {
   |                                                             ^^^^^^^^^^ not found in this scope
   |
help: consider importing this struct through its public re-export
   |
1  + use crate::Executable;
   |

error[E0425]: cannot find value `perf_config_item` in this scope
  --> src/ast_node.rs:78:31
   |
78 |         let from_expression = perf_config_item.as_ref().and_then(|item| item.from.clone());
   |                               ^^^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `perf_config_item` in this scope
  --> src/ast_node.rs:79:29
   |
79 |         let to_expression = perf_config_item.as_ref().and_then(|item| item.to.clone());
   |                             ^^^^^^^^^^^^^^^^ not found in this scope

error[E0433]: failed to resolve: use of undeclared type `PerfExpressionEvaluator`
  --> src/ast_node.rs:82:31
   |
82 |             let parsed_from = PerfExpressionEvaluator::eval(from_expr);
   |                               ^^^^^^^^^^^^^^^^^^^^^^^ use of undeclared type `PerfExpressionEvaluator`
   |
help: consider importing this struct through its public re-export
   |
1  + use crate::PerfExpressionEvaluator;
   |

error[E0425]: cannot find value `iter` in this scope
  --> src/ast_node.rs:83:13
   |
83 |             iter.set_from(parsed_from);
   |             ^^^^ not found in this scope

error[E0433]: failed to resolve: use of undeclared type `PerfExpressionEvaluator`
  --> src/ast_node.rs:87:29
   |
87 |             let parsed_to = PerfExpressionEvaluator::eval(to_expr);
   |                             ^^^^^^^^^^^^^^^^^^^^^^^ use of undeclared type `PerfExpressionEvaluator`
   |
help: consider importing this struct through its public re-export
   |
1  + use crate::PerfExpressionEvaluator;
   |

error[E0425]: cannot find value `parsed_to` in this scope
  --> src/ast_node.rs:92:12
   |
92 |         if parsed_to == 0 {
   |            ^^^^^^^^^
   |
help: the binding `parsed_to` is available in a different scope in the same function
  --> src/ast_node.rs:87:17
   |
87 |             let parsed_to = PerfExpressionEvaluator::eval(to_expr);
   |                 ^^^^^^^^^

error[E0412]: cannot find type `Executable` in this scope
   --> src/ast_node.rs:100:39
    |
100 |     pub fn labels(&self, executable: &Executable) -> Vec<String> {
    |                                       ^^^^^^^^^^ not found in this scope
    |
help: consider importing this struct through its public re-export
    |
1   + use crate::Executable;
    |

error[E0425]: cannot find value `iter` in this scope
   --> src/ast_node.rs:101:40
    |
101 |         if (executable.is_iterish() && iter.to? > 0) {
    |                                        ^^^^ not found in this scope

error[E0412]: cannot find type `Executable` in this scope
   --> src/ast_node.rs:121:41
    |
121 |     pub fn children(&self, executable: &Executable) -> Vec<Executable> {
    |                                         ^^^^^^^^^^ not found in this scope
    |
help: consider importing this struct through its public re-export
    |
1   + use crate::Executable;
    |

error[E0412]: cannot find type `Executable` in this scope
   --> src/ast_node.rs:121:60
    |
121 |     pub fn children(&self, executable: &Executable) -> Vec<Executable> {
    |                                                            ^^^^^^^^^^ not found in this scope
    |
help: consider importing this struct through its public re-export
    |
1   + use crate::Executable;
    |

error[E0433]: failed to resolve: use of undeclared type `Executable`
   --> src/ast_node.rs:126:34
    |
126 |             let new_executable = Executable::new(
    |                                  ^^^^^^^^^^ use of undeclared type `Executable`
    |
help: consider importing this struct through its public re-export
    |
1   + use crate::Executable;
    |

error[E0425]: cannot find value `executed` in this scope
   --> src/ast_node.rs:128:17
    |
128 |                 executed.step + 1, // step of the current node
    |                 ^^^^^^^^ not found in this scope

error[E0425]: cannot find value `executed` in this scope
   --> src/ast_node.rs:129:23
    |
129 |                 Some(&executed), // set the belongs_to to the current executable
    |                       ^^^^^^^^ not found in this scope

error[E0425]: cannot find value `executed` in this scope
   --> src/ast_node.rs:134:22
    |
134 |                 Some(executed), // the AST node
    |                      ^^^^^^^^ not found in this scope

error[E0425]: cannot find value `executed` in this scope
   --> src/ast_node.rs:135:20
    |
135 |                 if executed.is_iterish() { // check iter or not
    |                    ^^^^^^^^ not found in this scope

error[E0422]: cannot find struct, variant or union type `IteratorMeta` in this scope
   --> src/ast_node.rs:141:26
    |
141 |                     Some(IteratorMeta {
    |                          ^^^^^^^^^^^^ not found in this scope
    |
help: consider importing this struct through its public re-export
    |
1   + use crate::IteratorMeta;
    |

warning: unnecessary parentheses around `if` condition
  --> src/executor.rs:63:23
   |
63 |             } else if (executed.is_iterish()) {
   |                       ^                     ^
   |
   = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
   |
63 -             } else if (executed.is_iterish()) {
63 +             } else if executed.is_iterish() {
   |

warning: unnecessary parentheses around `if` condition
  --> src/executor.rs:64:20
   |
64 |                   if (
   |  ____________________^
65 | |                     self.registry.ast_node.fill_iter_unless_empty_index(&executed)
   | |____________________^
66 |                       ||
67 |                       !executed.is_iterish()
   |  ___________________________________________^
68 | |                 ) {
   | |_________________^
   |
help: remove these parentheses
   |
64 ~                 if self.registry.ast_node.fill_iter_unless_empty_index(&executed)
65 |                     ||
66 ~                     !executed.is_iterish() {
   |

warning: unnecessary parentheses around `if` condition
   --> src/ast_node.rs:101:12
    |
101 |         if (executable.is_iterish() && iter.to? > 0) {
    |            ^                                       ^
    |
help: remove these parentheses
    |
101 -         if (executable.is_iterish() && iter.to? > 0) {
101 +         if executable.is_iterish() && iter.to? > 0 {
    |

error[E0616]: field `ast_node` of struct `Registry` is private
  --> src/executor.rs:65:35
   |
65 |                     self.registry.ast_node.fill_iter_unless_empty_index(&executed)
   |                                   ^^^^^^^^ private field

error[E0616]: field `ast_node` of struct `Registry` is private
  --> src/executor.rs:69:35
   |
69 |                     self.registry.ast_node.enqueue_children(&executed);
   |                                   ^^^^^^^^ private field

error[E0277]: `()` is not a future
  --> src/executor.rs:36:120
   |
36 |       pub async fn bulk_exec_and_enqueue_and_set_primitive_to_output(&mut self, step: usize) -> impl Future<Output = ()> {
   |  ________________________________________________________________________________________________________________________^
37 | |         // Get values by slots from EthCall
38 | |         let slots: HashMap<String, &str> = self.queue_per_step[step].iter().map(|executable| (executable.get_edfs(), executable.get_abs_s...
39 | |         let values = EthCall::get_values_by_slots(&slots, "mainnet", "0x1234567890123456789012345678901234567890", "0x1234567890123456789...
...  |
77 | |         self.flush_executed(step);
78 | |     }
   | |_____^ `()` is not a future
   |
   = help: the trait `Future` is not implemented for `()`
   = note: () must be a future or must implement `IntoFuture` to be awaited

error[E0277]: the `?` operator can only be used in an async function that returns `Result` or `Option` (or another type that implements `FromResidual`)
  --> src/executor.rs:50:46
   |
36 |       pub async fn bulk_exec_and_enqueue_and_set_primitive_to_output(&mut self, step: usize) -> impl Future<Output = ()> {
   |  ________________________________________________________________________________________________________________________-
37 | |         // Get values by slots from EthCall
38 | |         let slots: HashMap<String, &str> = self.queue_per_step[step].iter().map(|executable| (executable.get_edfs(), executable.get_abs_s...
39 | |         let values = EthCall::get_values_by_slots(&slots, "mainnet", "0x1234567890123456789012345678901234567890", "0x1234567890123456789...
...  |
50 | |             if let Some(value) = values.await?.get(executed.get_edfs().as_str()) {
   | |                                              ^ cannot use the `?` operator in an async function that returns `()`
...  |
77 | |         self.flush_executed(step);
78 | |     }
   | |_____- this function should return `Result` or `Option` to accept `?`
   |
   = help: the trait `FromResidual<Result<Infallible, Box<dyn std::error::Error>>>` is not implemented for `()`

error[E0277]: `()` is not a future
  --> src/executor.rs:36:95
   |
36 |     pub async fn bulk_exec_and_enqueue_and_set_primitive_to_output(&mut self, step: usize) -> impl Future<Output = ()> {
   |                                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^ `()` is not a future
   |
   = help: the trait `Future` is not implemented for `()`
   = note: () must be a future or must implement `IntoFuture` to be awaited

error[E0308]: mismatched types
  --> src/eth_call.rs:61:41
   |
61 |             values.insert(edfs.clone(), &value.to_string());
   |                    ------               ^^^^^^^^^^^^^^^^^^ expected `String`, found `&String`
   |                    |
   |                    arguments to this method are incorrect
   |
help: the return type of this call is `&std::string::String` due to the type of the argument passed
  --> src/eth_call.rs:61:13
   |
61 |             values.insert(edfs.clone(), &value.to_string());
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------^
   |                                         |
   |                                         this argument influences the return type of `insert`
note: method defined here
  --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/std/src/collections/hash/map.rs:1104:12
help: consider removing the borrow
   |
61 -             values.insert(edfs.clone(), &value.to_string());
61 +             values.insert(edfs.clone(), value.to_string());
   |

error[E0308]: mismatched types
  --> src/eth_call.rs:65:12
   |
65 |         Ok(values)
   |         -- ^^^^^^ expected `HashMap<String, &str>`, found `HashMap<String, String>`
   |         |
   |         arguments to this enum variant are incorrect
   |
   = note: expected struct `HashMap<_, &str>`
              found struct `HashMap<_, std::string::String>`
help: the type constructed contains `HashMap<std::string::String, std::string::String>` due to the type of the argument passed
  --> src/eth_call.rs:65:9
   |
65 |         Ok(values)
   |         ^^^------^
   |            |
   |            this argument influences the type of `Ok`
note: tuple variant defined here
  --> /rustc/7cf61ebde7b22796c69757901dd346d0fe70bd97/library/core/src/result.rs:506:5

Some errors have detailed explanations: E0277, E0308, E0412, E0422, E0425, E0432, E0433, E0616.
For more information about an error, try `rustc --explain E0277`.
warning: `mc-indexer-extractor` (bin "mc-indexer-extractor") generated 3 warnings
error: could not compile `mc-indexer-extractor` (bin "mc-indexer-extractor") due to 30 previous errors; 3 warnings emitted
